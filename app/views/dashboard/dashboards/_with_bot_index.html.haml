.dashboard
  .dashboard-navbar
    .dashboard-navbar-tabs
      .tab-link.active{data: {tab: 'goals'}}
        %i.fa.fa-bullseye{aria: {hidden: 'true'}}
        &nbsp; Goals
      .tab-link#logs-tab{data: {tab: 'logs'}}
        %i.fa.fa-file-text-o{aria: {hidden: 'true'}}
        &nbsp; Bot logs
        %span#new-logs.hidden 0
      .tab-link{data: {tab: 'bot'}}
        %i.fa.fa-cog{aria: {hidden: 'true'}}
        &nbsp; Bot config
      .tab-link{data: {tab: 'boss'}}
        %i.fa.fa-cog{aria: {hidden: 'true'}}
        &nbsp; Boss config
    .dashboard-navbar-status
      %p
        %i.fa.fa-plug{aria: {hidden: 'true'}}
        &nbsp;connected:
        %span#bot-connected{data: {channel: current_user.bot.channel}}
          %i.fa.fa-question-circle.text-warning{aria: {hidden: 'true'}}
      %p
        %span#mod= raw inline_svg('sword')
        &nbsp;moderator:
        %span#bot-moderator{data: {channel: current_user.bot.channel}}
          %i.fa.fa-question-circle.text-warning{aria: {hidden: 'true'}}
  .dashboard-content
    #goals-show-links.link-container.active
      .row
        .col
          %label.string.optional{for: "bot_Boss health"} Sub goal link
          .input-group
            %input#sub-goal-link.form-control.form-control-sm.readonly{readonly: 'readonly', type: 'text', value: "#{bot_url(@bot)}?token=#{@bot.token}" }
            %span.input-group-btn
              %button.btn.btn-sm.btn-primary.clipboard-btn{type: 'button', data: {container: 'body', content: 'Copied!', placement: 'bottom', toggle: 'popover', clipboard: {action: 'copy', target: '#sub-goal-link'}}} Copy link!
        .col
          %label.string.optional{for: "bot_Boss health"} Bits goal link
          .input-group
            %input#bits-goal-link.form-control.form-control-sm.readonly{readonly: 'readonly', type: 'text', value: "#{bot_url(@bot)}?token=#{@bot.token}" }
            %span.input-group-btn
              %button.btn.btn-sm.btn-primary.clipboard-btn{type: 'button', data: {container: 'body', content: 'Copied!', placement: 'bottom', toggle: 'popover', clipboard: {action: 'copy', target: '#bits-goal-link'}}} Copy link!
      %hr
    #bot-show-link.link-container
      %label.string.optional{for: "bot_Boss health"} Boss link
      .input-group
        %input#link.form-control.form-control-sm.readonly{readonly: 'readonly', type: 'text', value: "#{bot_url(@bot)}?token=#{@bot.token}" }
        %span.input-group-btn
          %button.btn.btn-sm.btn-primary.clipboard-btn{type: 'button', data: {container: 'body', content: 'Copied!', placement: 'bottom', toggle: 'popover', clipboard: {action: 'copy', target: '#link'}}} Copy link!
      %hr
    #goals.tab-content.goals-container.active
      = render 'dashboard/goals/show', sub_goal: @sub_goal, achieved_sub_goals: @achieved_sub_goals, bits_goal: @bits_goal, achieved_bits_goals: @achieved_bits_goals
    #logs.tab-content.scrollable
      #logs-container
        = render 'logs/logs_renderer', logs: @logs
      .pagination
        = link_to_next_page(@logs, "Load #{@logs.page(@logs.next_page).length} more...", class: "next-page", remote: true)
    #bot.tab-content.scrollable
      = render 'dashboard/bots/bot_form', bot: @bot
    #boss.tab-content.scrollable
      = render 'dashboard/bosses/boss_form', boss: @bot.boss
  .dashboard-boss
    = render 'bots/boss_card', bot: @bot

= content_for :after_js do
  :javascript
    var logsWaitlist = [];
    var logDelayed = false;
    var logHiddenCounter = 0;
    App.cable.subscriptions.create(
      {
        channel: 'DashboardChannel',
        bot_id: #{@bot.id}
      },
      {
        connected: function(data) {
          console.log("#{"[connected dashboard #{@bot.id}]"}");
          $.get(
            "#{dashboard_bots_status_index_url}?bot_id=#{@bot.id}",
            null
          )
        },
        received: function(data) {
          if (data['connected'] && data['moderator']) {
            $('#bot-connected').html(data['connected']);
            $('#bot-moderator').html(data['moderator']);
            if (data['alert']) {
              $('.notification-container').prepend(data['alert']);
              closeNotification();
              animateNotifications('slideInRight');
            }
          } else if (data['log']) {
            var log = data['log'];
            logsWaitlist.unshift(log);
            prependLog();
          }
        }
      }
    );

    function prependLog() {
      if (!logDelayed && logsWaitlist.length > 0) {
        logDelayed = true;
        var log = logsWaitlist.pop();
        $('#logs').prepend(log);
        $('.log').first().hide().slideDown();

        if (!$('#logs').is(':visible')) {
          logHiddenCounter = logHiddenCounter + 1;
          console.log(logHiddenCounter)
          $('#new-logs').html(logHiddenCounter);
          $('#new-logs').removeClass('hidden');
        }

        setTimeout(function() {
        logDelayed = false;
        prependLog()
        }, 500);
      }
    };

  = render 'bots/after_js_bot'
